<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:enums1="clr-namespace:ULA.AddinsHost.Business.Device.Enums;assembly=ULA.AddinsHost"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:viewModels="clr-namespace:ULA.Presentation.Infrastructure.ViewModels;assembly=ULA.Presentation.Infrastructure"
    xmlns:converters1="clr-namespace:ULA.Devices.Presentation.Converters"
    xmlns:presentation="clr-namespace:ULA.Devices.Presentation"
    xmlns:interceptors="clr-namespace:ULA.Interceptors;assembly=ULA.Interceptors"
    xmlns:runtime="clr-namespace:ULA.Devices.Presentation.Runtime"
    xmlns:converters="clr-namespace:ULA.Presentation.SharedResourses.Converters;assembly=ULA.Presentation.SharedResourses"
    xmlns:behaviors="clr-namespace:ULA.Presentation.Behaviors;assembly=ULA.Presentation"
    xmlns:dataTemplateSelectors="clr-namespace:ULA.Devices.Presentation.DataTemplateSelectors"
    >
    
    <converters1:StarterStatetoBrushConverter x:Key="StarterStatetoBrushConverter" />
    <converters1:EnumStatesToBrushConverter x:Key="EnumStatesToBrushConverter" />
    <converters1:ObjectAsBoolToStateColor x:Key="ObjectAsBoolToStateColor" />
    <converters1:ObjectAsBoolToStateBrush x:Key="ObjectAsBoolToStateBrush" />
    <converters1:EnumStatesToCommandTypeBrushConverter x:Key="EnumStatesToCommandTypeBrushConverter"/>
    <converters1:ObjAsBoolToAutoModeVisibilityConverter x:Key="ObjAsBoolToAutoModeVisibilityConverter" />
    <converters:ObjectAsBoolToVisibilityConverter x:Key="ObjectAsBoolToVisibilityConverter"/>
    <converters:ObjectAsBoolToVisibilityRevertConverter x:Key="ObjectAsBoolToVisibilityRevertConverter"/>
    <converters1:WidgetStateToVisibilityConverter x:Key="WidgetStateToVisibilityConverter"/>
    <converters:IsNullToVisibilityConverterRevert x:Key="IsNullToVisibilityConverterRevert"/>
    <converters:IsNullToVisibilityConverter x:Key="IsNullToVisibilityConverter"/>

    <Style x:Key="CommandStateStyle" TargetType="Border">
        <Style.Triggers>
            <DataTrigger Binding="{Binding DeviceCommandStateViewModel.CommandType}" Value="{x:Static interceptors:CommandTypesEnum.ON}">
                <Setter Property="BorderBrush" Value="Red" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DeviceCommandStateViewModel.CommandType}" Value="{x:Static interceptors:CommandTypesEnum.OFF}">
                <Setter Property="BorderBrush" Value="Green" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DeviceCommandStateViewModel.CommandType}" Value="{x:Static interceptors:CommandTypesEnum.Repair}">
                <Setter Property="BorderBrush" Value="Orange" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DeviceCommandStateViewModel.CommandType}" Value="{x:Static interceptors:CommandTypesEnum.NoRepair}">
                <Setter Property="BorderBrush" Value="Orange" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DeviceCommandStateViewModel.CommandType}" Value="{x:Static interceptors:CommandTypesEnum.AUTO}">
                <Setter Property="BorderBrush" Value="Indigo" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DeviceCommandStateViewModel.CommandType}" Value="{x:Static interceptors:CommandTypesEnum.MANUAL}">
                <Setter Property="BorderBrush" Value="Indigo" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DeviceCommandStateViewModel.IsCommandSucceed}" Value="True">
                <Setter Property="BorderBrush" Value="Transparent" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DeviceCommandStateViewModel.IsCommandSucceed}" Value="False">
                <Setter Property="BorderBrush" Value="Transparent" />
            </DataTrigger>
            <DataTrigger Binding="{Binding StateWidget}" Value="{x:Static enums1:WidgetState.NoConnection}">
                <Setter  Property="Background" Value="#AFC0C0C0" />
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="BorderThickness" Value="5" />
    </Style>
    <!-- стиль для индикатора выполнения команды на 3-м пускателе -->
    <!-- я полдня совокуплялся с этим индикатором, чтобы он гасился когда надо, а он не хотел-->
    <!-- выход нашел только такой-->
    <Style x:Key="IsCommandSendingToVisibilityStyle" TargetType="Border">
        <Style.Triggers>
            <DataTrigger Binding="{Binding DeviceCommandStateViewModel.IsCommandSending}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DeviceCommandStateViewModel.IsCommandSucceed}" Value="True">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--  Шаблон для Runo3ConfigLogicalDevice  -->
    <DataTemplate DataType="{x:Type presentation:ConfigDeviceViewModel}">
        <Viewbox
            Width="Auto"
            Height="Auto"
            Stretch="Uniform"
            ToolTip="{Binding DeviceDescription}">
            <Border
                Width="150"
                Height="110"
                Margin="2"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                BorderBrush="#BFCFCFCF"
                BorderThickness="1">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="4*" />
                        <ColumnDefinition Width="4*" />
                        <ColumnDefinition Width="1*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="2*" />
                        <RowDefinition Height="4*" />
                        <RowDefinition Height="1*" />
                    </Grid.RowDefinitions>
                    <Border
                        Grid.Row="0"
                        Grid.Column="0"
                        Grid.ColumnSpan="2"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Background="Silver"
                        BorderBrush="#FFCFCFCF"
                        BorderThickness="1">
                        <Viewbox Margin="2" Stretch="Uniform">
                            <TextBlock
                                MaxWidth="130"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"
                                FontSize="10"
                                Text="{Binding DeviceName}"
                                TextAlignment="Center"
                                TextWrapping="Wrap" />
                        </Viewbox>
                    </Border>

                    <Border
                        Grid.Row="1"
                        Grid.Column="0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Background="#FFC5C5C5"
                        BorderBrush="#FFCFCFCF"
                        BorderThickness="1">

                        <Border
                            Margin="10"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Background="#FFAAAAAA"
                            BorderBrush="#FFCFCFCF"
                            BorderThickness="1" />
                    </Border>

                    <Border
                        Grid.Row="1"
                        Grid.Column="1"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Background="#FFC5C5C5"
                        BorderBrush="#FFCFCFCF"
                        BorderThickness="1">
                        <Border
                            Margin="10"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Background="#FFAAAAAA"
                            BorderBrush="#FFCFCFCF"
                            BorderThickness="1" />
                    </Border>

                    <Border
                        Grid.Row="0"
                        Grid.RowSpan="3"
                        Grid.Column="2"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Background="#FFC5C5C5"
                        BorderBrush="#FFCFCFCF"
                        BorderThickness="1">

                        <TextBlock
                            Margin="4"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            FontSize="8"
                            Text="Нет связи"
                            TextAlignment="Center"
                            TextWrapping="Wrap" />

                    </Border>
                    <Border
                        Grid.Row="2"
                        Grid.Column="0"
                        Grid.ColumnSpan="2"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Background="#FFC5C5C5"
                        BorderBrush="#FFCFCFCF"
                        BorderThickness="1" />
                </Grid>
            </Border>
        </Viewbox>
    </DataTemplate>

    <!--  Шаблон для Runo3RuntimeLogicalDevice  -->
    <!--TODO: make 2 datatemplates for runtimedevice with timeMode and !timeMode-->
    <DataTemplate  DataType="{x:Type runtime:RuntimeDeviceViewModel}">
        <ContentControl Background="AntiqueWhite"  Content="{Binding .}">
            <ContentControl.Resources>
                <ResourceDictionary>
                    <ResourceDictionary.MergedDictionaries>
                        <ResourceDictionary Source="../ResourceTemplates/TimeModeDataTemplate.xaml"/>
                        <ResourceDictionary Source="../ResourceTemplates/NoTimeModeDataTemplate.xaml"/>
                    </ResourceDictionary.MergedDictionaries>
                </ResourceDictionary>
            </ContentControl.Resources>
            <ContentControl.ContentTemplateSelector>
                <dataTemplateSelectors:TimeModeDateTemplateSelector TimeModeDataTemplate="{StaticResource TimeModeDataTemplate}" NoTimeModeDataTemplate="{StaticResource NoTimeModeDataTemplate}"/>
            </ContentControl.ContentTemplateSelector>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseDoubleClick" >
                    <i:InvokeCommandAction Command="{Binding NavigateToSchemeCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </ContentControl>
    </DataTemplate>

    <DataTemplate DataType="{x:Type runtime:DefectStateViewModel}">
        <Border BorderBrush="Gray" BorderThickness="1">
            <StackPanel Margin="4">
                <TextBlock
                            Margin="1"
                            Background="{Binding IsNoPowerDefect, Converter={StaticResource ObjectAsBoolToStateBrush}}"
                            Foreground="Black"
                            Text="Нет питания"
                            TextAlignment="Left" />
                <TextBlock
                            Margin="1"
                            Background="{Binding IsProtectionDefect, Converter={StaticResource ObjectAsBoolToStateBrush}}"
                            Foreground="Black"
                            Text="Неисправность охраны"
                            TextAlignment="Left" />
                <TextBlock
                            Margin="1"
                            Background="{Binding IsManagementDefect, Converter={StaticResource ObjectAsBoolToStateBrush}}"
                            Foreground="Black"
                            Text="Неисправность управления"
                            TextAlignment="Left" />
                <TextBlock
                            Margin="1"
                            Background="{Binding IsManagementChainsDefect, Converter={StaticResource ObjectAsBoolToStateBrush}}"
                            Foreground="Black"
                            Text="Неисправность цепей управления"
                            TextAlignment="Left" />
                <TextBlock
                            Margin="1"
                            Background="{Binding IsFusesDefect, Converter={StaticResource ObjectAsBoolToStateBrush}}"
                            Foreground="Black"
                            Text="Неисправность предохранителей"
                            TextAlignment="Left" />
            </StackPanel>
        </Border>
    </DataTemplate>

</ResourceDictionary>